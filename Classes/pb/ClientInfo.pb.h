// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientInfo.proto

#ifndef PROTOBUF_ClientInfo_2eproto__INCLUDED
#define PROTOBUF_ClientInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ClientInfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsClientInfoImpl();
void InitDefaultsClientInfo();
inline void InitDefaults() {
  InitDefaultsClientInfo();
}
}  // namespace protobuf_ClientInfo_2eproto
namespace com {
namespace sqage {
namespace xiyou {
namespace gateway {
namespace client {
class ClientInfo;
class ClientInfoDefaultTypeInternal;
extern ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
}  // namespace client
}  // namespace gateway
}  // namespace xiyou
}  // namespace sqage
}  // namespace com
namespace com {
namespace sqage {
namespace xiyou {
namespace gateway {
namespace client {

// ===================================================================

class ClientInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.sqage.xiyou.gateway.client.ClientInfo) */ {
 public:
  ClientInfo();
  virtual ~ClientInfo();

  ClientInfo(const ClientInfo& from);

  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientInfo(ClientInfo&& from) noexcept
    : ClientInfo() {
    *this = ::std::move(from);
  }

  inline ClientInfo& operator=(ClientInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientInfo* internal_default_instance() {
    return reinterpret_cast<const ClientInfo*>(
               &_ClientInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ClientInfo* other);
  friend void swap(ClientInfo& a, ClientInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientInfo& from);
  void MergeFrom(const ClientInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string otherInfo = 10;
  int otherinfo_size() const;
  void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 10;
  const ::std::string& otherinfo(int index) const;
  ::std::string* mutable_otherinfo(int index);
  void set_otherinfo(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_otherinfo(int index, ::std::string&& value);
  #endif
  void set_otherinfo(int index, const char* value);
  void set_otherinfo(int index, const char* value, size_t size);
  ::std::string* add_otherinfo();
  void add_otherinfo(const ::std::string& value);
  #if LANG_CXX11
  void add_otherinfo(::std::string&& value);
  #endif
  void add_otherinfo(const char* value);
  void add_otherinfo(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& otherinfo() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_otherinfo();

  // required string userType = 1;
  bool has_usertype() const;
  void clear_usertype();
  static const int kUserTypeFieldNumber = 1;
  const ::std::string& usertype() const;
  void set_usertype(const ::std::string& value);
  #if LANG_CXX11
  void set_usertype(::std::string&& value);
  #endif
  void set_usertype(const char* value);
  void set_usertype(const char* value, size_t size);
  ::std::string* mutable_usertype();
  ::std::string* release_usertype();
  void set_allocated_usertype(::std::string* usertype);

  // required string userName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required string clientId = 3;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // required string channel = 4;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 4;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // required string phoneType = 5;
  bool has_phonetype() const;
  void clear_phonetype();
  static const int kPhoneTypeFieldNumber = 5;
  const ::std::string& phonetype() const;
  void set_phonetype(const ::std::string& value);
  #if LANG_CXX11
  void set_phonetype(::std::string&& value);
  #endif
  void set_phonetype(const char* value);
  void set_phonetype(const char* value, size_t size);
  ::std::string* mutable_phonetype();
  ::std::string* release_phonetype();
  void set_allocated_phonetype(::std::string* phonetype);

  // required string gpuType = 6;
  bool has_gputype() const;
  void clear_gputype();
  static const int kGpuTypeFieldNumber = 6;
  const ::std::string& gputype() const;
  void set_gputype(const ::std::string& value);
  #if LANG_CXX11
  void set_gputype(::std::string&& value);
  #endif
  void set_gputype(const char* value);
  void set_gputype(const char* value, size_t size);
  ::std::string* mutable_gputype();
  ::std::string* release_gputype();
  void set_allocated_gputype(::std::string* gputype);

  // required string networkMode = 7;
  bool has_networkmode() const;
  void clear_networkmode();
  static const int kNetworkModeFieldNumber = 7;
  const ::std::string& networkmode() const;
  void set_networkmode(const ::std::string& value);
  #if LANG_CXX11
  void set_networkmode(::std::string&& value);
  #endif
  void set_networkmode(const char* value);
  void set_networkmode(const char* value, size_t size);
  ::std::string* mutable_networkmode();
  ::std::string* release_networkmode();
  void set_allocated_networkmode(::std::string* networkmode);

  // required string resourceVersion = 8;
  bool has_resourceversion() const;
  void clear_resourceversion();
  static const int kResourceVersionFieldNumber = 8;
  const ::std::string& resourceversion() const;
  void set_resourceversion(const ::std::string& value);
  #if LANG_CXX11
  void set_resourceversion(::std::string&& value);
  #endif
  void set_resourceversion(const char* value);
  void set_resourceversion(const char* value, size_t size);
  ::std::string* mutable_resourceversion();
  ::std::string* release_resourceversion();
  void set_allocated_resourceversion(::std::string* resourceversion);

  // required string programVersion = 9;
  bool has_programversion() const;
  void clear_programversion();
  static const int kProgramVersionFieldNumber = 9;
  const ::std::string& programversion() const;
  void set_programversion(const ::std::string& value);
  #if LANG_CXX11
  void set_programversion(::std::string&& value);
  #endif
  void set_programversion(const char* value);
  void set_programversion(const char* value, size_t size);
  ::std::string* mutable_programversion();
  ::std::string* release_programversion();
  void set_allocated_programversion(::std::string* programversion);

  // required string mac = 11;
  bool has_mac() const;
  void clear_mac();
  static const int kMacFieldNumber = 11;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // optional string idfa = 12;
  bool has_idfa() const;
  void clear_idfa();
  static const int kIdfaFieldNumber = 12;
  const ::std::string& idfa() const;
  void set_idfa(const ::std::string& value);
  #if LANG_CXX11
  void set_idfa(::std::string&& value);
  #endif
  void set_idfa(const char* value);
  void set_idfa(const char* value, size_t size);
  ::std::string* mutable_idfa();
  ::std::string* release_idfa();
  void set_allocated_idfa(::std::string* idfa);

  // optional string androidId = 13;
  bool has_androidid() const;
  void clear_androidid();
  static const int kAndroidIdFieldNumber = 13;
  const ::std::string& androidid() const;
  void set_androidid(const ::std::string& value);
  #if LANG_CXX11
  void set_androidid(::std::string&& value);
  #endif
  void set_androidid(const char* value);
  void set_androidid(const char* value, size_t size);
  ::std::string* mutable_androidid();
  ::std::string* release_androidid();
  void set_allocated_androidid(::std::string* androidid);

  // optional string deviceId = 14;
  bool has_deviceid() const;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 14;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // optional string ime = 15;
  bool has_ime() const;
  void clear_ime();
  static const int kImeFieldNumber = 15;
  const ::std::string& ime() const;
  void set_ime(const ::std::string& value);
  #if LANG_CXX11
  void set_ime(::std::string&& value);
  #endif
  void set_ime(const char* value);
  void set_ime(const char* value, size_t size);
  ::std::string* mutable_ime();
  ::std::string* release_ime();
  void set_allocated_ime(::std::string* ime);

  // required string platform = 16;
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 16;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // @@protoc_insertion_point(class_scope:com.sqage.xiyou.gateway.client.ClientInfo)
 private:
  void set_has_usertype();
  void clear_has_usertype();
  void set_has_username();
  void clear_has_username();
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_channel();
  void clear_has_channel();
  void set_has_phonetype();
  void clear_has_phonetype();
  void set_has_gputype();
  void clear_has_gputype();
  void set_has_networkmode();
  void clear_has_networkmode();
  void set_has_resourceversion();
  void clear_has_resourceversion();
  void set_has_programversion();
  void clear_has_programversion();
  void set_has_mac();
  void clear_has_mac();
  void set_has_idfa();
  void clear_has_idfa();
  void set_has_androidid();
  void clear_has_androidid();
  void set_has_deviceid();
  void clear_has_deviceid();
  void set_has_ime();
  void clear_has_ime();
  void set_has_platform();
  void clear_has_platform();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> otherinfo_;
  ::google::protobuf::internal::ArenaStringPtr usertype_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr phonetype_;
  ::google::protobuf::internal::ArenaStringPtr gputype_;
  ::google::protobuf::internal::ArenaStringPtr networkmode_;
  ::google::protobuf::internal::ArenaStringPtr resourceversion_;
  ::google::protobuf::internal::ArenaStringPtr programversion_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr idfa_;
  ::google::protobuf::internal::ArenaStringPtr androidid_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr ime_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  friend struct ::protobuf_ClientInfo_2eproto::TableStruct;
  friend void ::protobuf_ClientInfo_2eproto::InitDefaultsClientInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientInfo

// required string userType = 1;
inline bool ClientInfo::has_usertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientInfo::set_has_usertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientInfo::clear_has_usertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientInfo::clear_usertype() {
  usertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_usertype();
}
inline const ::std::string& ClientInfo::usertype() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.userType)
  return usertype_.GetNoArena();
}
inline void ClientInfo::set_usertype(const ::std::string& value) {
  set_has_usertype();
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.userType)
}
#if LANG_CXX11
inline void ClientInfo::set_usertype(::std::string&& value) {
  set_has_usertype();
  usertype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.userType)
}
#endif
inline void ClientInfo::set_usertype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_usertype();
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.userType)
}
inline void ClientInfo::set_usertype(const char* value, size_t size) {
  set_has_usertype();
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.userType)
}
inline ::std::string* ClientInfo::mutable_usertype() {
  set_has_usertype();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.userType)
  return usertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_usertype() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.userType)
  clear_has_usertype();
  return usertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_usertype(::std::string* usertype) {
  if (usertype != NULL) {
    set_has_usertype();
  } else {
    clear_has_usertype();
  }
  usertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usertype);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.userType)
}

// required string userName = 2;
inline bool ClientInfo::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientInfo::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& ClientInfo::username() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.userName)
  return username_.GetNoArena();
}
inline void ClientInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.userName)
}
#if LANG_CXX11
inline void ClientInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.userName)
}
#endif
inline void ClientInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.userName)
}
inline void ClientInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.userName)
}
inline ::std::string* ClientInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_username() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.userName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.userName)
}

// required string clientId = 3;
inline bool ClientInfo::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientInfo::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientInfo::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientInfo::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& ClientInfo::clientid() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.clientId)
  return clientid_.GetNoArena();
}
inline void ClientInfo::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.clientId)
}
#if LANG_CXX11
inline void ClientInfo::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.clientId)
}
#endif
inline void ClientInfo::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.clientId)
}
inline void ClientInfo::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.clientId)
}
inline ::std::string* ClientInfo::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_clientid() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.clientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.clientId)
}

// required string channel = 4;
inline bool ClientInfo::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientInfo::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientInfo::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientInfo::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel();
}
inline const ::std::string& ClientInfo::channel() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.channel)
  return channel_.GetNoArena();
}
inline void ClientInfo::set_channel(const ::std::string& value) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.channel)
}
#if LANG_CXX11
inline void ClientInfo::set_channel(::std::string&& value) {
  set_has_channel();
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.channel)
}
#endif
inline void ClientInfo::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.channel)
}
inline void ClientInfo::set_channel(const char* value, size_t size) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.channel)
}
inline ::std::string* ClientInfo::mutable_channel() {
  set_has_channel();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_channel() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.channel)
  clear_has_channel();
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.channel)
}

// required string phoneType = 5;
inline bool ClientInfo::has_phonetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientInfo::set_has_phonetype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientInfo::clear_has_phonetype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientInfo::clear_phonetype() {
  phonetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phonetype();
}
inline const ::std::string& ClientInfo::phonetype() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.phoneType)
  return phonetype_.GetNoArena();
}
inline void ClientInfo::set_phonetype(const ::std::string& value) {
  set_has_phonetype();
  phonetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.phoneType)
}
#if LANG_CXX11
inline void ClientInfo::set_phonetype(::std::string&& value) {
  set_has_phonetype();
  phonetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.phoneType)
}
#endif
inline void ClientInfo::set_phonetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phonetype();
  phonetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.phoneType)
}
inline void ClientInfo::set_phonetype(const char* value, size_t size) {
  set_has_phonetype();
  phonetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.phoneType)
}
inline ::std::string* ClientInfo::mutable_phonetype() {
  set_has_phonetype();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.phoneType)
  return phonetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_phonetype() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.phoneType)
  clear_has_phonetype();
  return phonetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_phonetype(::std::string* phonetype) {
  if (phonetype != NULL) {
    set_has_phonetype();
  } else {
    clear_has_phonetype();
  }
  phonetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonetype);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.phoneType)
}

// required string gpuType = 6;
inline bool ClientInfo::has_gputype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientInfo::set_has_gputype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientInfo::clear_has_gputype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientInfo::clear_gputype() {
  gputype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gputype();
}
inline const ::std::string& ClientInfo::gputype() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.gpuType)
  return gputype_.GetNoArena();
}
inline void ClientInfo::set_gputype(const ::std::string& value) {
  set_has_gputype();
  gputype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.gpuType)
}
#if LANG_CXX11
inline void ClientInfo::set_gputype(::std::string&& value) {
  set_has_gputype();
  gputype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.gpuType)
}
#endif
inline void ClientInfo::set_gputype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gputype();
  gputype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.gpuType)
}
inline void ClientInfo::set_gputype(const char* value, size_t size) {
  set_has_gputype();
  gputype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.gpuType)
}
inline ::std::string* ClientInfo::mutable_gputype() {
  set_has_gputype();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.gpuType)
  return gputype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_gputype() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.gpuType)
  clear_has_gputype();
  return gputype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_gputype(::std::string* gputype) {
  if (gputype != NULL) {
    set_has_gputype();
  } else {
    clear_has_gputype();
  }
  gputype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gputype);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.gpuType)
}

// required string networkMode = 7;
inline bool ClientInfo::has_networkmode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientInfo::set_has_networkmode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClientInfo::clear_has_networkmode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClientInfo::clear_networkmode() {
  networkmode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_networkmode();
}
inline const ::std::string& ClientInfo::networkmode() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.networkMode)
  return networkmode_.GetNoArena();
}
inline void ClientInfo::set_networkmode(const ::std::string& value) {
  set_has_networkmode();
  networkmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.networkMode)
}
#if LANG_CXX11
inline void ClientInfo::set_networkmode(::std::string&& value) {
  set_has_networkmode();
  networkmode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.networkMode)
}
#endif
inline void ClientInfo::set_networkmode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_networkmode();
  networkmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.networkMode)
}
inline void ClientInfo::set_networkmode(const char* value, size_t size) {
  set_has_networkmode();
  networkmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.networkMode)
}
inline ::std::string* ClientInfo::mutable_networkmode() {
  set_has_networkmode();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.networkMode)
  return networkmode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_networkmode() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.networkMode)
  clear_has_networkmode();
  return networkmode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_networkmode(::std::string* networkmode) {
  if (networkmode != NULL) {
    set_has_networkmode();
  } else {
    clear_has_networkmode();
  }
  networkmode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), networkmode);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.networkMode)
}

// required string resourceVersion = 8;
inline bool ClientInfo::has_resourceversion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClientInfo::set_has_resourceversion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClientInfo::clear_has_resourceversion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClientInfo::clear_resourceversion() {
  resourceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resourceversion();
}
inline const ::std::string& ClientInfo::resourceversion() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.resourceVersion)
  return resourceversion_.GetNoArena();
}
inline void ClientInfo::set_resourceversion(const ::std::string& value) {
  set_has_resourceversion();
  resourceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.resourceVersion)
}
#if LANG_CXX11
inline void ClientInfo::set_resourceversion(::std::string&& value) {
  set_has_resourceversion();
  resourceversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.resourceVersion)
}
#endif
inline void ClientInfo::set_resourceversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resourceversion();
  resourceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.resourceVersion)
}
inline void ClientInfo::set_resourceversion(const char* value, size_t size) {
  set_has_resourceversion();
  resourceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.resourceVersion)
}
inline ::std::string* ClientInfo::mutable_resourceversion() {
  set_has_resourceversion();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.resourceVersion)
  return resourceversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_resourceversion() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.resourceVersion)
  clear_has_resourceversion();
  return resourceversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_resourceversion(::std::string* resourceversion) {
  if (resourceversion != NULL) {
    set_has_resourceversion();
  } else {
    clear_has_resourceversion();
  }
  resourceversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourceversion);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.resourceVersion)
}

// required string programVersion = 9;
inline bool ClientInfo::has_programversion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClientInfo::set_has_programversion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClientInfo::clear_has_programversion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClientInfo::clear_programversion() {
  programversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_programversion();
}
inline const ::std::string& ClientInfo::programversion() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.programVersion)
  return programversion_.GetNoArena();
}
inline void ClientInfo::set_programversion(const ::std::string& value) {
  set_has_programversion();
  programversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.programVersion)
}
#if LANG_CXX11
inline void ClientInfo::set_programversion(::std::string&& value) {
  set_has_programversion();
  programversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.programVersion)
}
#endif
inline void ClientInfo::set_programversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_programversion();
  programversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.programVersion)
}
inline void ClientInfo::set_programversion(const char* value, size_t size) {
  set_has_programversion();
  programversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.programVersion)
}
inline ::std::string* ClientInfo::mutable_programversion() {
  set_has_programversion();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.programVersion)
  return programversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_programversion() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.programVersion)
  clear_has_programversion();
  return programversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_programversion(::std::string* programversion) {
  if (programversion != NULL) {
    set_has_programversion();
  } else {
    clear_has_programversion();
  }
  programversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), programversion);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.programVersion)
}

// repeated string otherInfo = 10;
inline int ClientInfo::otherinfo_size() const {
  return otherinfo_.size();
}
inline void ClientInfo::clear_otherinfo() {
  otherinfo_.Clear();
}
inline const ::std::string& ClientInfo::otherinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
  return otherinfo_.Get(index);
}
inline ::std::string* ClientInfo::mutable_otherinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
  return otherinfo_.Mutable(index);
}
inline void ClientInfo::set_otherinfo(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
  otherinfo_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ClientInfo::set_otherinfo(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
  otherinfo_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ClientInfo::set_otherinfo(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  otherinfo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
}
inline void ClientInfo::set_otherinfo(int index, const char* value, size_t size) {
  otherinfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
}
inline ::std::string* ClientInfo::add_otherinfo() {
  // @@protoc_insertion_point(field_add_mutable:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
  return otherinfo_.Add();
}
inline void ClientInfo::add_otherinfo(const ::std::string& value) {
  otherinfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
}
#if LANG_CXX11
inline void ClientInfo::add_otherinfo(::std::string&& value) {
  otherinfo_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
}
#endif
inline void ClientInfo::add_otherinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  otherinfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
}
inline void ClientInfo::add_otherinfo(const char* value, size_t size) {
  otherinfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClientInfo::otherinfo() const {
  // @@protoc_insertion_point(field_list:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
  return otherinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ClientInfo::mutable_otherinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.sqage.xiyou.gateway.client.ClientInfo.otherInfo)
  return &otherinfo_;
}

// required string mac = 11;
inline bool ClientInfo::has_mac() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ClientInfo::set_has_mac() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ClientInfo::clear_has_mac() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ClientInfo::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mac();
}
inline const ::std::string& ClientInfo::mac() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.mac)
  return mac_.GetNoArena();
}
inline void ClientInfo::set_mac(const ::std::string& value) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.mac)
}
#if LANG_CXX11
inline void ClientInfo::set_mac(::std::string&& value) {
  set_has_mac();
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.mac)
}
#endif
inline void ClientInfo::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.mac)
}
inline void ClientInfo::set_mac(const char* value, size_t size) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.mac)
}
inline ::std::string* ClientInfo::mutable_mac() {
  set_has_mac();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_mac() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.mac)
  clear_has_mac();
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    set_has_mac();
  } else {
    clear_has_mac();
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.mac)
}

// optional string idfa = 12;
inline bool ClientInfo::has_idfa() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ClientInfo::set_has_idfa() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ClientInfo::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ClientInfo::clear_idfa() {
  idfa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idfa();
}
inline const ::std::string& ClientInfo::idfa() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.idfa)
  return idfa_.GetNoArena();
}
inline void ClientInfo::set_idfa(const ::std::string& value) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.idfa)
}
#if LANG_CXX11
inline void ClientInfo::set_idfa(::std::string&& value) {
  set_has_idfa();
  idfa_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.idfa)
}
#endif
inline void ClientInfo::set_idfa(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.idfa)
}
inline void ClientInfo::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.idfa)
}
inline ::std::string* ClientInfo::mutable_idfa() {
  set_has_idfa();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.idfa)
  return idfa_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_idfa() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.idfa)
  clear_has_idfa();
  return idfa_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_idfa(::std::string* idfa) {
  if (idfa != NULL) {
    set_has_idfa();
  } else {
    clear_has_idfa();
  }
  idfa_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idfa);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.idfa)
}

// optional string androidId = 13;
inline bool ClientInfo::has_androidid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ClientInfo::set_has_androidid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ClientInfo::clear_has_androidid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ClientInfo::clear_androidid() {
  androidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_androidid();
}
inline const ::std::string& ClientInfo::androidid() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.androidId)
  return androidid_.GetNoArena();
}
inline void ClientInfo::set_androidid(const ::std::string& value) {
  set_has_androidid();
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.androidId)
}
#if LANG_CXX11
inline void ClientInfo::set_androidid(::std::string&& value) {
  set_has_androidid();
  androidid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.androidId)
}
#endif
inline void ClientInfo::set_androidid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_androidid();
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.androidId)
}
inline void ClientInfo::set_androidid(const char* value, size_t size) {
  set_has_androidid();
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.androidId)
}
inline ::std::string* ClientInfo::mutable_androidid() {
  set_has_androidid();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.androidId)
  return androidid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_androidid() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.androidId)
  clear_has_androidid();
  return androidid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_androidid(::std::string* androidid) {
  if (androidid != NULL) {
    set_has_androidid();
  } else {
    clear_has_androidid();
  }
  androidid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), androidid);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.androidId)
}

// optional string deviceId = 14;
inline bool ClientInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ClientInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ClientInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ClientInfo::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
inline const ::std::string& ClientInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.deviceId)
  return deviceid_.GetNoArena();
}
inline void ClientInfo::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.deviceId)
}
#if LANG_CXX11
inline void ClientInfo::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.deviceId)
}
#endif
inline void ClientInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.deviceId)
}
inline void ClientInfo::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.deviceId)
}
inline ::std::string* ClientInfo::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.deviceId)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.deviceId)
}

// optional string ime = 15;
inline bool ClientInfo::has_ime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ClientInfo::set_has_ime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ClientInfo::clear_has_ime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ClientInfo::clear_ime() {
  ime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ime();
}
inline const ::std::string& ClientInfo::ime() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.ime)
  return ime_.GetNoArena();
}
inline void ClientInfo::set_ime(const ::std::string& value) {
  set_has_ime();
  ime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.ime)
}
#if LANG_CXX11
inline void ClientInfo::set_ime(::std::string&& value) {
  set_has_ime();
  ime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.ime)
}
#endif
inline void ClientInfo::set_ime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ime();
  ime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.ime)
}
inline void ClientInfo::set_ime(const char* value, size_t size) {
  set_has_ime();
  ime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.ime)
}
inline ::std::string* ClientInfo::mutable_ime() {
  set_has_ime();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.ime)
  return ime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_ime() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.ime)
  clear_has_ime();
  return ime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_ime(::std::string* ime) {
  if (ime != NULL) {
    set_has_ime();
  } else {
    clear_has_ime();
  }
  ime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ime);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.ime)
}

// required string platform = 16;
inline bool ClientInfo::has_platform() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ClientInfo::set_has_platform() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ClientInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ClientInfo::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
inline const ::std::string& ClientInfo::platform() const {
  // @@protoc_insertion_point(field_get:com.sqage.xiyou.gateway.client.ClientInfo.platform)
  return platform_.GetNoArena();
}
inline void ClientInfo::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.sqage.xiyou.gateway.client.ClientInfo.platform)
}
#if LANG_CXX11
inline void ClientInfo::set_platform(::std::string&& value) {
  set_has_platform();
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.sqage.xiyou.gateway.client.ClientInfo.platform)
}
#endif
inline void ClientInfo::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.sqage.xiyou.gateway.client.ClientInfo.platform)
}
inline void ClientInfo::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.sqage.xiyou.gateway.client.ClientInfo.platform)
}
inline ::std::string* ClientInfo::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:com.sqage.xiyou.gateway.client.ClientInfo.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_platform() {
  // @@protoc_insertion_point(field_release:com.sqage.xiyou.gateway.client.ClientInfo.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:com.sqage.xiyou.gateway.client.ClientInfo.platform)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace gateway
}  // namespace xiyou
}  // namespace sqage
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClientInfo_2eproto__INCLUDED
